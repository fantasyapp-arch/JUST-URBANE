<?php

/**
 * Data Migration Script: MongoDB to MySQL
 * 
 * This script helps migrate data from the Python/FastAPI/MongoDB backend
 * to the new PHP/CodeIgniter/MySQL backend.
 * 
 * Usage:
 * php migrate_data_to_php.php
 */

require_once 'vendor/autoload.php';

use CodeIgniter\Database\Config;

class DataMigrator
{
    private $db;
    private $mongoData;

    public function __construct()
    {
        // Load CodeIgniter database configuration
        $config = new Config();
        $this->db = \Config\Database::connect();
        
        echo "=== Just Urbane Data Migration Tool ===\n";
        echo "Python/MongoDB → PHP/MySQL\n\n";
    }

    public function run()
    {
        try {
            $this->loadMongoData();
            $this->migrateUsers();
            $this->migrateArticles();
            $this->migrateCategories();
            $this->migrateIssues();
            $this->migrateTransactions();
            $this->migrateHomepageConfig();
            
            echo "\n✅ Migration completed successfully!\n";
            echo "🔐 Default Admin User: admin / admin123\n";
            echo "🌐 Update frontend .env: REACT_APP_BACKEND_URL=your-php-backend-url\n";
            
        } catch (Exception $e) {
            echo "❌ Migration failed: " . $e->getMessage() . "\n";
        }
    }

    private function loadMongoData()
    {
        echo "📂 Loading MongoDB export data...\n";
        
        // Load JSON exports (generated by complete_export.py)
        $dataDir = '../database/';
        
        $this->mongoData = [
            'users' => $this->loadJsonFile($dataDir . 'users.json'),
            'articles' => $this->loadJsonFile($dataDir . 'articles.json'),
            'categories' => $this->loadJsonFile($dataDir . 'categories.json'),
            'issues' => $this->loadJsonFile($dataDir . 'issues.json'),
            'transactions' => $this->loadJsonFile($dataDir . 'transactions.json'),
            'orders' => $this->loadJsonFile($dataDir . 'orders.json'),
        ];
        
        echo "   Users: " . count($this->mongoData['users']) . "\n";
        echo "   Articles: " . count($this->mongoData['articles']) . "\n";
        echo "   Categories: " . count($this->mongoData['categories']) . "\n";
        echo "   Issues: " . count($this->mongoData['issues']) . "\n";
        echo "   Transactions: " . count($this->mongoData['transactions']) . "\n";
    }

    private function loadJsonFile($file)
    {
        if (!file_exists($file)) {
            echo "⚠️  Warning: $file not found, skipping...\n";
            return [];
        }
        
        $content = file_get_contents($file);
        return json_decode($content, true) ?: [];
    }

    private function migrateUsers()
    {
        echo "\n👥 Migrating users...\n";
        
        $count = 0;
        foreach ($this->mongoData['users'] as $user) {
            try {
                $userData = [
                    'id' => $user['id'] ?? $this->generateUUID(),
                    'email' => $user['email'],
                    'full_name' => $user['full_name'],
                    'hashed_password' => $user['hashed_password'],
                    'is_premium' => (bool)($user['is_premium'] ?? false),
                    'subscription_type' => $user['subscription_type'] ?? null,
                    'subscription_status' => $user['subscription_status'] ?? null,
                    'subscription_expires_at' => $this->formatDateTime($user['subscription_expires_at'] ?? null),
                    'created_at' => $this->formatDateTime($user['created_at'] ?? null),
                ];
                
                if (!$this->db->table('users')->where('email', $userData['email'])->get()->getRowArray()) {
                    $this->db->table('users')->insert($userData);
                    $count++;
                }
            } catch (Exception $e) {
                echo "   ⚠️ Failed to migrate user {$user['email']}: " . $e->getMessage() . "\n";
            }
        }
        
        echo "   ✅ Migrated $count users\n";
    }

    private function migrateArticles()
    {
        echo "\n📄 Migrating articles...\n";
        
        $count = 0;
        foreach ($this->mongoData['articles'] as $article) {
            try {
                $articleData = [
                    'id' => $article['id'] ?? $this->generateUUID(),
                    'title' => $article['title'],
                    'body' => $article['body'],
                    'summary' => $article['summary'] ?? null,
                    'hero_image' => $article['hero_image'] ?? null,
                    'author_name' => $article['author_name'],
                    'category' => $article['category'],
                    'subcategory' => $article['subcategory'] ?? null,
                    'tags' => !empty($article['tags']) ? json_encode($article['tags']) : null,
                    'featured' => (bool)($article['featured'] ?? false),
                    'trending' => (bool)($article['trending'] ?? false),
                    'premium' => (bool)($article['premium'] ?? false),
                    'is_premium' => (bool)($article['is_premium'] ?? false),
                    'views' => (int)($article['views'] ?? 0),
                    'reading_time' => $article['reading_time'] ?? null,
                    'slug' => $article['slug'] ?? $this->generateSlug($article['title']),
                    'published_at' => $this->formatDateTime($article['published_at'] ?? null),
                    'created_at' => $this->formatDateTime($article['created_at'] ?? null),
                ];
                
                if (!$this->db->table('articles')->where('id', $articleData['id'])->get()->getRowArray()) {
                    $this->db->table('articles')->insert($articleData);
                    $count++;
                }
            } catch (Exception $e) {
                echo "   ⚠️ Failed to migrate article {$article['title']}: " . $e->getMessage() . "\n";
            }
        }
        
        echo "   ✅ Migrated $count articles\n";
    }

    private function migrateCategories()
    {
        echo "\n🗂️ Migrating categories...\n";
        
        $count = 0;
        foreach ($this->mongoData['categories'] as $category) {
            try {
                $categoryData = [
                    'id' => $category['id'] ?? $this->generateUUID(),
                    'name' => $category['name'],
                    'display_name' => $category['display_name'] ?? null,
                    'description' => $category['description'] ?? null,
                    'subcategories' => !empty($category['subcategories']) ? json_encode($category['subcategories']) : null,
                    'created_at' => $this->formatDateTime(null),
                ];
                
                if (!$this->db->table('categories')->where('name', $categoryData['name'])->get()->getRowArray()) {
                    $this->db->table('categories')->insert($categoryData);
                    $count++;
                }
            } catch (Exception $e) {
                echo "   ⚠️ Failed to migrate category {$category['name']}: " . $e->getMessage() . "\n";
            }
        }
        
        echo "   ✅ Migrated $count categories\n";
    }

    private function migrateIssues()
    {
        echo "\n📖 Migrating magazine issues...\n";
        
        $count = 0;
        foreach ($this->mongoData['issues'] as $issue) {
            try {
                $issueData = [
                    'id' => $issue['id'] ?? $this->generateUUID(),
                    'title' => $issue['title'],
                    'cover_image' => $issue['cover_image'],
                    'description' => $issue['description'],
                    'month' => $issue['month'],
                    'year' => (int)$issue['year'],
                    'pages' => !empty($issue['pages']) ? json_encode($issue['pages']) : json_encode([]),
                    'is_digital' => (bool)($issue['is_digital'] ?? true),
                    'published_at' => $this->formatDateTime($issue['published_at'] ?? null),
                    'created_at' => $this->formatDateTime(null),
                ];
                
                if (!$this->db->table('issues')->where('id', $issueData['id'])->get()->getRowArray()) {
                    $this->db->table('issues')->insert($issueData);
                    $count++;
                }
            } catch (Exception $e) {
                echo "   ⚠️ Failed to migrate issue {$issue['title']}: " . $e->getMessage() . "\n";
            }
        }
        
        echo "   ✅ Migrated $count magazine issues\n";
    }

    private function migrateTransactions()
    {
        echo "\n💳 Migrating transactions...\n";
        
        $count = 0;
        foreach ($this->mongoData['transactions'] as $transaction) {
            try {
                $transactionData = [
                    'id' => $transaction['id'] ?? $this->generateUUID(),
                    'user_id' => $transaction['user_id'] ?? null,
                    'razorpay_order_id' => $transaction['razorpay_order_id'] ?? null,
                    'razorpay_payment_id' => $transaction['razorpay_payment_id'] ?? null,
                    'package_id' => $transaction['package_id'],
                    'amount' => (float)($transaction['amount'] ?? 0),
                    'currency' => $transaction['currency'] ?? 'INR',
                    'status' => $transaction['status'],
                    'payment_method' => $transaction['payment_method'] ?? 'razorpay',
                    'created_at' => $this->formatDateTime($transaction['created_at'] ?? null),
                ];
                
                if (!$this->db->table('transactions')->where('id', $transactionData['id'])->get()->getRowArray()) {
                    $this->db->table('transactions')->insert($transactionData);
                    $count++;
                }
            } catch (Exception $e) {
                echo "   ⚠️ Failed to migrate transaction {$transaction['id']}: " . $e->getMessage() . "\n";
            }
        }
        
        echo "   ✅ Migrated $count transactions\n";
    }

    private function migrateHomepageConfig()
    {
        echo "\n🏠 Setting up homepage configuration...\n";
        
        try {
            // Create default homepage configuration
            $articles = $this->db->table('articles')->orderBy('published_at', 'DESC')->get()->getResultArray();
            
            if (!empty($articles)) {
                $config = [
                    'id' => $this->generateUUID(),
                    'hero_article' => json_encode([$articles[0]['id']]),
                    'featured_articles' => json_encode(array_slice(array_column($articles, 'id'), 0, 4)),
                    'trending_articles' => json_encode(array_slice(array_column($articles, 'id'), 0, 6)),
                    'latest_articles' => json_encode(array_slice(array_column($articles, 'id'), 0, 8)),
                    'created_at' => date('Y-m-d H:i:s'),
                ];
                
                // Add category-specific sections
                $categories = ['fashion', 'people', 'business', 'technology', 'travel', 'culture', 'entertainment'];
                foreach ($categories as $category) {
                    $categoryArticles = $this->db->table('articles')
                        ->where('category', $category)
                        ->limit(4)
                        ->get()
                        ->getResultArray();
                    
                    $config[$category . '_articles'] = json_encode(array_column($categoryArticles, 'id'));
                }
                
                $this->db->table('homepage_config')->insert($config);
                echo "   ✅ Homepage configuration created\n";
            }
        } catch (Exception $e) {
            echo "   ⚠️ Failed to create homepage config: " . $e->getMessage() . "\n";
        }
    }

    private function formatDateTime($dateString)
    {
        if (empty($dateString)) {
            return date('Y-m-d H:i:s');
        }
        
        try {
            $date = new DateTime($dateString);
            return $date->format('Y-m-d H:i:s');
        } catch (Exception $e) {
            return date('Y-m-d H:i:s');
        }
    }

    private function generateUUID()
    {
        return sprintf(
            '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
            mt_rand(0, 0xffff), mt_rand(0, 0xffff),
            mt_rand(0, 0xffff),
            mt_rand(0, 0x0fff) | 0x4000,
            mt_rand(0, 0x3fff) | 0x8000,
            mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff)
        );
    }

    private function generateSlug($title)
    {
        return strtolower(trim(preg_replace('/[^A-Za-z0-9-]+/', '-', $title), '-'));
    }
}

// Run migration
if (php_sapi_name() === 'cli') {
    $migrator = new DataMigrator();
    $migrator->run();
} else {
    echo "This script must be run from the command line.\n";
}